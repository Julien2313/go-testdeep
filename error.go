// Copyright (c) 2018, Maxime SoulÃ©
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

package testdeep

import (
	"bytes"
	"strings"
)

// Error represents errors generated by testdeep functions.
type Error struct {
	// Context when the error occurred
	Context Context
	// Message describes the error
	Message string
	// Got value
	Got interface{}
	// Expected value
	Expected interface{}
	// If not nil, Summary is used to display summary instead of using
	// Got + Expected fields
	Summary interface{}
	// If initialized, location of TestDeep operator originator of the error
	Location Location
	// If defined, the current Error comes from this Error
	Origin *Error
	// If defined, points to the next Error
	Next *Error
}

var (
	booleanError = &Error{}

	// ErrTooManyErrors is chained to the last error encountered when
	// the maximum number of errors has been reached.
	ErrTooManyErrors = &Error{
		Message: "Too many errors (use TESTDEEP_MAX_ERRORS=-1 to see all)",
	}
)

// Error implements error interface.
func (e *Error) Error() string {
	buf := bytes.Buffer{}

	e.Append(&buf, "")

	return buf.String()
}

// Append appends the Error contents to "buf" using prefix "prefix"
// for each line.
func (e *Error) Append(buf *bytes.Buffer, prefix string) {
	if e == booleanError {
		return
	}

	var writeEolPrefix func()
	if prefix != "" {
		eolPrefix := make([]byte, 1+len(prefix))
		eolPrefix[0] = '\n'
		copy(eolPrefix[1:], prefix)

		writeEolPrefix = func() {
			buf.Write(eolPrefix)
		}
		buf.WriteString(prefix)
	} else {
		writeEolPrefix = func() {
			buf.WriteByte('\n')
		}
	}

	if e == ErrTooManyErrors {
		buf.WriteString(e.Message)
		return
	}

	if pos := strings.Index(e.Message, "%%"); pos >= 0 {
		buf.WriteString(e.Message[:pos])
		buf.WriteString(e.Context.Path)
		buf.WriteString(e.Message[pos+2:])
	} else {
		buf.WriteString(e.Context.Path)
		buf.WriteString(": ")
		buf.WriteString(e.Message)
	}

	writeEolPrefix()

	if e.Summary != nil {
		buf.WriteByte('\t')
		buf.WriteString(indentString(e.SummaryString(), prefix+"\t"))
	} else {
		buf.WriteString("\t     got: ")
		buf.WriteString(indentString(e.GotString(), prefix+"\t          "))
		writeEolPrefix()
		buf.WriteString("\texpected: ")
		buf.WriteString(indentString(e.ExpectedString(), prefix+"\t          "))
	}

	// This error comes from another one
	if e.Origin != nil {
		writeEolPrefix()
		buf.WriteString("Originates from following error:\n")

		e.Origin.Append(buf, prefix+"\t")
	}

	if e.Location.IsInitialized() &&
		!strings.HasPrefix(e.Location.Func, "Cmp") && // no need to log Cmp* func
		(e.Next == nil || e.Next.Location != e.Location) {
		writeEolPrefix()
		buf.WriteString("[under TestDeep operator ")
		buf.WriteString(e.Location.String())
		buf.WriteByte(']')
	}

	if e.Next != nil {
		buf.WriteByte('\n')
		e.Next.Append(buf, prefix) // next error at same level
	}
}

// GotString returns the string corresponding to the Got
// field. Returns the empty string if the Error Summary field is not
// empty.
func (e *Error) GotString() string {
	if e.Summary != nil {
		return ""
	}
	return toString(e.Got)
}

// ExpectedString returns the string corresponding to the Expected
// field. Returns the empty string if the Error Summary field is not
// empty.
func (e *Error) ExpectedString() string {
	if e.Summary != nil {
		return ""
	}
	return toString(e.Expected)
}

// SummaryString returns the string corresponding to the Summary
// field. Returns the empty string if the Error Summary field is nil.
func (e *Error) SummaryString() string {
	if e.Summary == nil {
		return ""
	}
	return toString(e.Summary)
}
